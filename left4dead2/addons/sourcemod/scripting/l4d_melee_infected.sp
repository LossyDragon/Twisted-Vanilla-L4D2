/* Plugin Template generated by Pawn Studio */
#pragma semicolon 1
#include <sourcemod>
#include <sdktools>
#include <sdktools_functions> 
#include <sdkhooks>
 

new	Min_Index=0;
new Max_Index=0;
new String:WeaponName[40][100];
new String:WeaponClass[40][100];
#define Position_rhand 1
#define Position_lhand 2
new ZOMBIECLASS_TANK=	5;
#define ArraySize MAXPLAYERS+1

new MeleeEnt[ArraySize];
new bool:MeleeViewOn[ArraySize];
new Float:WeaponScale[ArraySize];
new MeleeWeapon[ArraySize];
new GameMode;
new L4D2Version;
public Plugin:myinfo = 
{
	name = "Melee Infected",
	author = "Pan XiaoHai",
	description = "",
	version = "1.7",
	url = "<- URL ->"
}
new Handle:l4d_melee_tank_chance;
new Handle:l4d_melee_tank_chance_witch;
new Handle:l4d_melee_tank_weaponsize;
new Handle:l4d_melee_tank_chance_drop;
new Handle:l4d_melee_tank_chance_fullclip;
public OnPluginStart()
{
	GameCheck();  
 	l4d_melee_tank_chance = CreateConVar("l4d_melee_tank_chance", "100",  "chance of melee tank[0.0, 100.0]" );
	l4d_melee_tank_chance_witch = CreateConVar("l4d_melee_tank_chance_witch", "30", "chance of take witch[0.0, 100.0]" );
	l4d_melee_tank_weaponsize = CreateConVar("l4d_melee_tank_weaponsize", "1.0",  "weapon size [1.0, 2.0]" );
	l4d_melee_tank_chance_drop = CreateConVar("l4d_melee_tank_chance_drop", "100", "chance of drop weapon when tank dead  [0.0, 100.0]" );
	l4d_melee_tank_chance_fullclip = CreateConVar("l4d_melee_tank_chance_fullclip", "100", "chance of full clip[0.0, 100.0]" );
	
	
	AutoExecConfig(true, "l4d_melee_infected"); 
	
	HookEvent("player_spawn", player_spawn);
	
	HookEvent("player_death", player_death); 
	HookEvent("player_bot_replace", player_bot_replace );	  
	HookEvent("bot_player_replace", bot_player_replace );	
	
	HookEvent("round_start", round_end);
	HookEvent("round_end", round_end);
	HookEvent("finale_win", round_end);
	HookEvent("mission_lost", round_end);
	HookEvent("map_transition", round_end);	 
	
	RegConsoleCmd("sm_melee", sm_melee);  
	ResetAllState();
	Init();
}
GameCheck()
{
	decl String:GameName[16];
	GetConVarString(FindConVar("mp_gamemode"), GameName, sizeof(GameName));
	
	
	if (StrEqual(GameName, "survival", false))
		GameMode = 3;
	else if (StrEqual(GameName, "versus", false) || StrEqual(GameName, "teamversus", false) || StrEqual(GameName, "scavenge", false) || StrEqual(GameName, "teamscavenge", false))
		GameMode = 2;
	else if (StrEqual(GameName, "coop", false) || StrEqual(GameName, "realism", false))
		GameMode = 1;
	else
	{
		GameMode = 0;
 	}
	GameMode=GameMode+0;
	GetGameFolderName(GameName, sizeof(GameName));
	if (StrEqual(GameName, "left4dead2", false))
	{
 
		L4D2Version=true;
		ZOMBIECLASS_TANK=8;
	}	
	else
	{
 
		L4D2Version=false;
		ZOMBIECLASS_TANK=5;
	}
 
}


public Action:player_spawn(Handle:hEvent, const String:strName[], bool:DontBroadcast)
{ 
	new client = GetClientOfUserId(GetEventInt(hEvent, "userid"));   
	if(client>0)
	{ 
		CreateMeleeTank(client);	
	}
}
public Action:sm_melee(client,args)
{
 
	if(client>0)
	{ 
		MeleeViewOn[client]=!MeleeViewOn[client];
 	}
 
}
 
public Action:player_death(Handle:hEvent, const String:strName[], bool:DontBroadcast)
{ 
	new client = GetClientOfUserId(GetEventInt(hEvent, "userid")); 
	if(client>0 && client<=MaxClients)
	{
		if(IsMelee(MeleeEnt[client]) && GetRandomFloat(0.0, 100.0)<GetConVarFloat(l4d_melee_tank_chance_drop))
		{
			new Float:pos[3];
			new Float:angle[3];
			GetClientEyePosition(client, pos);
			GetClientAbsAngles(client, angle);
			new weapon=MeleeWeapon[client];
			if(StrContains(WeaponClass[weapon], "weapon")>=0)
			{
				new ent=CreateEntityByName(WeaponClass[weapon]);
				DispatchSpawn(ent);
				TeleportEntity(ent, pos, NULL_VECTOR, NULL_VECTOR);
				if(L4D2Version)SetEntPropFloat(ent , Prop_Send,"m_flModelScale", WeaponScale[client]); 
				new ammo=0;
				new clip=0;				
				if(StrContains(WeaponClass[weapon], "shotgun")>=0)
				{
					if(L4D2Version)ammo=GetConVarInt(FindConVar("ammo_autoshotgun_max"));
					else ammo=GetConVarInt(FindConVar("ammo_buckshot_max"));
				}
				else if(StrContains(WeaponClass[weapon], "hunting")>=0 )
				{
					ammo=GetConVarInt(FindConVar("ammo_huntingrifle_max"));
				}
				else if(StrContains(WeaponClass[weapon], "rifle")>=0 && StrContains(WeaponClass[weapon], "m60")<0)
				{
					ammo=GetConVarInt(FindConVar("ammo_assaultrifle_max"));
				}
				else if(StrContains(WeaponClass[weapon], "grenade_launcher")>=0 )
				{
					ammo=GetConVarInt(FindConVar("ammo_grenadelauncher_max")); 
				}
				else if(StrContains(WeaponClass[weapon], "sniper")>=0 )
				{
					ammo=GetConVarInt(FindConVar("ammo_sniperrifle_max")); 
				}
				
				if(GetRandomFloat(0.0, 100.0)<GetConVarFloat(l4d_melee_tank_chance_fullclip))
				{
					clip=ammo; 
				}
				if(ammo>0 || clip>0)
				{ 
					 
					if(clip>0)SetEntProp(ent, Prop_Send, "m_iClip1", clip);
					if(ammo>0)SetEntProp(ent, Prop_Send, "m_iExtraPrimaryAmmo", ammo);
					//PrintToChatAll("%s AMMO ammo %d, clip %d",WeaponClass[weapon], ammo, clip); 
				}
			}
			else if(StrContains(WeaponClass[weapon], "witch")>=0)
			{
				new ent=CreateEntityByName("witch");
				DispatchSpawn(ent);
				TeleportEntity(ent, pos, NULL_VECTOR, NULL_VECTOR);
			}
			else 
			{
				new ent=CreateEntityByName("weapon_melee"); 
				DispatchKeyValue( ent, "melee_script_name", WeaponClass[weapon] );
				//PrintToChatAll("SCRITP %s",  WeaponClass[weapon] );
				DispatchSpawn(ent);
				TeleportEntity(ent, pos, angle, NULL_VECTOR);		
				if(L4D2Version)SetEntPropFloat(ent , Prop_Send,"m_flModelScale", WeaponScale[client]); 
			}
			
		}
		DeleteMelee(client);
	}
	return Plugin_Continue;	 
}
public player_bot_replace(Handle:Spawn_Event, const String:Spawn_Name[], bool:Spawn_Broadcast)
{
 	new client = GetClientOfUserId(GetEventInt(Spawn_Event, "player"));
	new bot = GetClientOfUserId(GetEventInt(Spawn_Event, "bot"));   
	 
	if(client>0)
	{
		DeleteMelee(client);	
	}
	if(bot>0)
	{
		 DeleteMelee(bot);
		 CreateMeleeTank(bot);
	}
}
public bot_player_replace(Handle:Spawn_Event, const String:Spawn_Name[], bool:Spawn_Broadcast)
{
 	new client = GetClientOfUserId(GetEventInt(Spawn_Event, "player"));
	new bot = GetClientOfUserId(GetEventInt(Spawn_Event, "bot"));   
	 
	if(bot>0)
	{
		DeleteMelee(bot);
	}
	if(client>0)
	{
		 DeleteMelee(client);
		 CreateMeleeTank(client);
	}

} 
public Action:round_end(Handle:event, const String:name[], bool:dontBroadcast)
{
	ResetAllState();
}
ResetAllState()
{
	for(new i=1; i<=MaxClients; i++)
	{
		MeleeEnt[i]=0;
	}
}
bool:IsMelee(ent)
{
	if(ent>0 && IsValidEdict(ent) && IsValidEntity(ent))
	{
		return true;
	}
	else return false;
}
 
DeleteMelee(client)
{
	if(IsMelee(MeleeEnt[client]))
	{
		AcceptEntityInput(MeleeEnt[client], "ClearParent");
		AcceptEntityInput(MeleeEnt[client], "kill");
		SDKUnhook(MeleeEnt[client], SDKHook_SetTransmit, Hook_SetTransmit);
	}
	MeleeEnt[client]=0;
}

#define Melee2_FireAxe 1
#define Melee2_bat 2
#define Melee2_Katana 3
#define Melee2_Machete 4
#define Melee2_Guitar 5
#define Melee2_pan 6
#define Melee2_ChainSaw 7
#define Melee2_Witch 8
#define Melee2_AK47 9
#define Melee2_m60 10
#define Melee2_autoshotgun 11
#define Melee2_spas 12
#define Melee2_grenade_launcher 13
#define Melee2_sniper_military 14

 
#define Melee_Rifle 1
#define Melee_AutoShotGun 2
#define Melee_HuntingRifle 3
#define Melee_Witch 4

public OnMapStart()
{  
	Init();
	for(new i=Min_Index; i<=Max_Index; i++)	PrecacheModel(WeaponName[i]);
	if(L4D2Version)
	{
		//code from 	"Melee In The Saferoom",	author = "N3wton",
		PrecacheModel( "models/weapons/melee/v_bat.mdl", true );
		PrecacheModel( "models/weapons/melee/v_cricket_bat.mdl", true );
		PrecacheModel( "models/weapons/melee/v_crowbar.mdl", true );
		PrecacheModel( "models/weapons/melee/v_electric_guitar.mdl", true );
		PrecacheModel( "models/weapons/melee/v_fireaxe.mdl", true );
		PrecacheModel( "models/weapons/melee/v_frying_pan.mdl", true );
		PrecacheModel( "models/weapons/melee/v_golfclub.mdl", true );
		PrecacheModel( "models/weapons/melee/v_katana.mdl", true );
		PrecacheModel( "models/weapons/melee/v_machete.mdl", true );
		PrecacheModel( "models/weapons/melee/v_tonfa.mdl", true );

		PrecacheModel( "models/weapons/melee/w_bat.mdl", true );
		PrecacheModel( "models/weapons/melee/w_cricket_bat.mdl", true );
		PrecacheModel( "models/weapons/melee/w_crowbar.mdl", true );
		PrecacheModel( "models/weapons/melee/w_electric_guitar.mdl", true );
		PrecacheModel( "models/weapons/melee/w_fireaxe.mdl", true );
		PrecacheModel( "models/weapons/melee/w_frying_pan.mdl", true );
		PrecacheModel( "models/weapons/melee/w_golfclub.mdl", true );
		PrecacheModel( "models/weapons/melee/w_katana.mdl", true );
		PrecacheModel( "models/weapons/melee/w_machete.mdl", true );
		PrecacheModel( "models/weapons/melee/w_tonfa.mdl", true );

		PrecacheGeneric( "scripts/melee/baseball_bat.txt", true );
		PrecacheGeneric( "scripts/melee/cricket_bat.txt", true );
		PrecacheGeneric( "scripts/melee/crowbar.txt", true );
		PrecacheGeneric( "scripts/melee/electric_guitar.txt", true );
		PrecacheGeneric( "scripts/melee/fireaxe.txt", true );
		PrecacheGeneric( "scripts/melee/frying_pan.txt", true );
		PrecacheGeneric( "scripts/melee/golfclub.txt", true );
		PrecacheGeneric( "scripts/melee/katana.txt", true );
		PrecacheGeneric( "scripts/melee/machete.txt", true );
		PrecacheGeneric( "scripts/melee/tonfa.txt", true );

		PrecacheModel("models/v_models/weapons/v_rifle_ak47.mdl",true);
		PrecacheModel("models/v_models/weapons/v_m60.mdl",true);
		PrecacheModel("models/v_models/weapons/v_autoshot_m4super.mdl",true);
		PrecacheModel("models/v_models/weapons/v_shotgun_spas.mdl",true);
		PrecacheModel("models/v_models/weapons/w_sniper_military.mdl",true); 		

	}
}
Init()  
{
	
	SetRandomSeed(GetSysTickCount());
	if(L4D2Version)
	{  	
		WeaponName[Melee2_FireAxe]="models/weapons/melee/w_fireaxe.mdl";
		WeaponName[Melee2_ChainSaw]="models/weapons/melee/w_chainsaw.mdl";
		WeaponName[Melee2_Katana]="models/weapons/melee/w_katana.mdl";
		WeaponName[Melee2_Machete]="models/weapons/melee/w_machete.mdl";	
		WeaponName[Melee2_Guitar]="models/weapons/melee/w_electric_guitar.mdl"; 
		WeaponName[Melee2_pan]="models/weapons/melee/w_frying_pan.mdl";
		WeaponName[Melee2_bat]="models/weapons/melee/w_cricket_bat.mdl";	 
		WeaponName[Melee2_Witch]="models/infected/witch.mdl";	
		
		WeaponName[Melee2_AK47]="models/w_models/weapons/w_rifle_ak47.mdl";
		WeaponName[Melee2_m60]="models/w_models/weapons/w_m60.mdl";
		WeaponName[Melee2_autoshotgun]="models/w_models/weapons/w_autoshot_m4super.mdl";	
		WeaponName[Melee2_spas]="models/w_models/weapons/w_shotgun_spas.mdl";
		WeaponName[Melee2_grenade_launcher]="models/w_models/weapons/w_grenade_launcher.mdl";
		WeaponName[Melee2_sniper_military]="models/w_models/weapons/w_sniper_military.mdl";	
		
		WeaponClass[Melee2_FireAxe]="fireaxe";
		WeaponClass[Melee2_ChainSaw]="weapon_chainsaw";
		WeaponClass[Melee2_Katana]="katana";
		WeaponClass[Melee2_Machete]="machete";	
		WeaponClass[Melee2_Guitar]="electric_guitar"; 
		WeaponClass[Melee2_pan]="frying_pan";
		WeaponClass[Melee2_bat]="cricket_bat";	 
		WeaponClass[Melee2_Witch]="witch";	
		
		WeaponClass[Melee2_AK47]="weapon_rifle_ak47";	
		WeaponClass[Melee2_m60]="weapon_rifle_m60";	
		WeaponClass[Melee2_autoshotgun]="weapon_autoshotgun";
		WeaponClass[Melee2_spas]="weapon_shotgun_spas";
		WeaponClass[Melee2_grenade_launcher]="weapon_grenade_launcher";
		WeaponClass[Melee2_sniper_military]="weapon_sniper_military";
		
		Min_Index=1;
		Max_Index=14;
		
		
	}
	else
	{ 
		WeaponName[Melee_Rifle]="models/w_models/weapons/w_rifle_m16a2.mdl";
		WeaponName[Melee_AutoShotGun]="models/w_models/weapons/w_autoshot_m4super.mdl";
		WeaponName[Melee_HuntingRifle]="models/w_models/weapons/w_sniper_mini14.mdl";
		WeaponName[Melee_Witch]="models/infected/witch.mdl";	 
		
		 
		WeaponClass[Melee_Rifle]="weapon_rifle";
		WeaponClass[Melee_AutoShotGun]="weapon_autoshotgun";
		WeaponClass[Melee_HuntingRifle]="weapon_hunting_rifle";
		WeaponClass[Melee_Witch]="witch";	 	
		Min_Index=1;
		Max_Index=4;		
	}
 
}
CreateMeleeTank(client)
{
 	if(client>0 && IsClientInGame(client) && IsPlayerAlive(client) && GetClientTeam(client)==3 && IsInfected(client, ZOMBIECLASS_TANK))
	{
		new Float:c=GetConVarFloat(l4d_melee_tank_chance);
		if(GetRandomFloat(0.0, 100.0)<c)
		{
			CreateTimer(1.0, TimerCreateMelee, client, TIMER_FLAG_NO_MAPCHANGE);
		}
	}
}
CreateMelee(client)
{
	DeleteMelee(client);
 	new weapon=0;
	new Float:chanceOfWitch=GetConVarFloat(l4d_melee_tank_chance_witch);
	new Float:r=GetRandomFloat(0.0, 100.0); 
	if(r<chanceOfWitch)
	{
		if(L4D2Version)weapon=Melee2_Witch;
		else weapon=Melee_Witch;
	}
	else
	{
		weapon=GetRandomInt(Min_Index,Max_Index);
		if(L4D2Version && weapon==Melee2_Witch)weapon=Melee2_autoshotgun;
		else if( weapon==Melee_Witch)weapon=Melee_AutoShotGun;
	}
	//weapon=Melee_Witch;
	new positon=1;
	if(GetRandomInt(1,3)<3)positon=Position_rhand;
	else positon=Position_lhand;
	
	//positon=Position_rhand;
	//weapon=Melee2_Witch;
	
	new Float:scale=0.0;	
	
	new melee=0;	
	melee=CreateEntityByName("prop_dynamic_override");   
   
	SetEntityModel(melee, WeaponName[weapon]);
	DispatchSpawn(melee); 
	
	decl String:tname[60];
	Format(tname, sizeof(tname), "target%d", client);
	DispatchKeyValue(client, "targetname", tname); 		
	DispatchKeyValue(melee, "parentname", tname);
	
	new Float:pos[3];
	new Float:ang[3]; 

	
	
	SetVariantString(tname);
	AcceptEntityInput(melee, "SetParent",melee, melee, 0); 	
	 
	new String:strPositon[32];
	if(positon==Position_lhand)strPositon="lhand";
	else strPositon="rhand";		
	SetVariantString(strPositon); 
	AcceptEntityInput(melee, "SetParentAttachment"); 
	 
	if(L4D2Version)GetPosAng(weapon, pos, ang, positon, scale);
	else GetPosAng_l4d1(weapon, pos, ang, positon, scale);  	

 	
	TeleportEntity(melee, pos, ang, NULL_VECTOR);
 
 	SetEntProp(melee, Prop_Send, "m_CollisionGroup", 2);   
	if(L4D2Version)SetEntPropFloat(melee , Prop_Send,"m_flModelScale", scale); 
	
	MeleeEnt[client]= melee ; 
	MeleeWeapon[client]=weapon;
	WeaponScale[client]=scale;
	MeleeViewOn[client]=false;
 	SDKHook(MeleeEnt[client], SDKHook_SetTransmit, Hook_SetTransmit);

 	
}
GetPosAng_l4d1(weapon, Float:pos[3], Float:ang[3], position, &Float:scale)
{ 
	if(weapon==Melee_Witch)
	{
		if(position==Position_rhand)
		{
			SetVector(pos,  -3.0, 15.0, 3.0); 
			SetVector(ang, -90.0, -0.0, 90.0);
		}
		if(position==Position_lhand)
		{
			SetVector(pos,  3.0, 15.0, -3.0); 
			SetVector(ang, 90.0, -0.0,90.0);		
		}		
	}
	else 
	{
		if(position==Position_rhand)
		{
			SetVector(pos,  1.0, -5.0, 3.0); 
			SetVector(ang, 0.0, -90.0,90.0);
		}
		if(position==Position_lhand)
		{
			SetVector(pos,  4.0, -5.0, -3.0); 
			SetVector(ang, 0.0, -90.0,90.0);		
		}	 
	}
}
GetPosAng(weapon, Float:pos[3], Float:ang[3], position, &Float:scale)
{

	if(weapon==Melee2_ChainSaw)
	{
		if(position==Position_rhand)
		{
			SetVector(pos,  -23.0,  -30.0, -5.0); 
			SetVector(ang, 00.0, 60.0,180.0);		
		}
		if(position==Position_lhand)
		{
			SetVector(pos,  -9.0,  -32.0, -1.0); 
			SetVector(ang, 00.0, 60.0,180.0);	
		}
	}
	else if(weapon==Melee2_Witch)
	{
		if(position==Position_rhand)
		{
			SetVector(pos,  -3.0, 15.0, 3.0); 
			SetVector(ang, -90.0, -0.0, 90.0);
		}
		if(position==Position_lhand)
		{
			SetVector(pos,  3.0, 15.0, -3.0); 
			SetVector(ang, 90.0, -0.0,90.0);		
		}		
	}
	else if(weapon>=Melee2_AK47)
	{
		if(position==Position_rhand)
		{
			SetVector(pos,  1.0, -5.0, 3.0); 
			SetVector(ang, 0.0, -90.0,90.0);
		}
		if(position==Position_lhand)
		{
			SetVector(pos,  4.0, -5.0, -3.0); 
			SetVector(ang, 0.0, -90.0,90.0);		
		}	
	}	
	else
	{
		if(position==Position_rhand)
		{
			SetVector(pos,  -4.0, 0.0, 3.0); 
			SetVector(ang, 0.0, -11.0,100.0);
		}
		if(position==Position_lhand)
		{
			SetVector(pos,  4.0, 0.0, -3.0); 
			SetVector(ang, 0.0, -11.0,100.0);		
		}
	}
	if(weapon!=Melee2_Witch)
	{
		scale=2.5;
		if(weapon==Melee2_Machete)scale=4.0;
		if(weapon==Melee2_bat)scale=1.7;
		if(weapon==Melee2_pan)scale=3.5;
		if(weapon==Melee2_Guitar)scale=2.3;
		if(weapon==Melee2_ChainSaw)scale=2.0;
		if(weapon==Melee2_Katana)scale=3.0;
		scale=scale*GetConVarFloat(l4d_melee_tank_weaponsize);		
		//ScaleVector(pos, scale/2.5);
	}
	else scale=1.0;
}

public Action:TimerCreateMelee(Handle:timer, any:client)
{
	if(client>0 && IsClientInGame(client) && IsPlayerAlive(client) && GetClientTeam(client)==3 && IsInfected(client, ZOMBIECLASS_TANK))
	{
		CreateMelee(client);
	}
}
public Action:Hook_SetTransmit(entity, client)
{ 
	if(entity==MeleeEnt[client])
	{
		if(MeleeViewOn[client])return Plugin_Continue;
		else return Plugin_Handled;
	}
	return Plugin_Continue;
}
SetVector(Float:target[3], Float:x, Float:y, Float:z)
{
	target[0]=x;
	target[1]=y;
	target[2]=z;
}
IsInfected(client, type)
{
	new class = GetEntProp(client, Prop_Send, "m_zombieClass");
	if(type==class)return true;
	else return false;
}